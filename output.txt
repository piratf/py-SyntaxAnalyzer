argc = 3
===============================
=> start parse.
line 0: ( { : { )
line 0: ( num : 123 )
line 0: ( + : + )
line 0: ( num : 12 )
line 0: ( . : . )
line 0: ( . : . )
line 0: ( num : 3 )
line 0: ( * : * )
line 0: ( num : 123 )
line 0: ( e : e )
line 0: ( - : - )
line 0: ( num : 123 )
line 0: ( + : + )
line 0: ( num : 123 )
line 1: ( num : 123 )
line 1: ( + : + )
line 1: ( num : 123 )
line 1: ( + : + )
line 1: ( + : + )
line 1: ( num : 123 )
line 1: ( e : e )
line 1: ( + : + )
line 1: ( num : 123 )
 found.
line    0  - <  0 :  2 > - ( { : { ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - <  2 :  6 > - ( num : 123 ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - <  6 :  8 > - ( + : + ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - <  8 : 11 > - ( num : 12 ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - < 10 : 12 > - ( . : . ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - < 11 : 13 > - ( . : . ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - < 12 : 14 > - ( num : 3 ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - < 14 : 16 > - ( * : * ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - < 16 : 20 > - ( num : 123 ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - < 19 : 21 > - ( e : e ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - < 20 : 22 > - ( - : - ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - < 21 : 25 > - ( num : 123 ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - < 25 : 27 > - ( + : + ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - < 27 : 31 > - ( num : 123 ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    0  - < 30 : 31 > - ( ; : ; ) 
content: { 123 + 12..3 * 123e-123 + 123;
line    1  - <  0 :  4 > - ( num : 123 ) 
content: 123 + 123 ++ 123e+123 }
line    1  - <  4 :  6 > - ( + : + ) 
content: 123 + 123 ++ 123e+123 }
line    1  - <  6 : 10 > - ( num : 123 ) 
content: 123 + 123 ++ 123e+123 }
line    1  - < 10 : 12 > - ( + : + ) 
content: 123 + 123 ++ 123e+123 }
line    1  - < 11 : 13 > - ( + : + ) 
content: 123 + 123 ++ 123e+123 }
line    1  - < 13 : 17 > - ( num : 123 ) 
content: 123 + 123 ++ 123e+123 }
line    1  - < 16 : 18 > - ( e : e ) 
content: 123 + 123 ++ 123e+123 }
line    1  - < 17 : 19 > - ( + : + ) 
content: 123 + 123 ++ 123e+123 }
line    1  - < 18 : 22 > - ( num : 123 ) 
content: 123 + 123 ++ 123e+123 }
line    1  - < 22 : 23 > - ( } : } ) 
content: 123 + 123 ++ 123e+123 }
============= Lexical Analyze Finished =============
============= 0 ERROR
contents = [['EXP', ';', 'L'], []]
prefix = ['A']
contents = [['EXP', '+', 'T'], ['EXP', '-', 'T'], ['EXP', '=', 'T'], ['T']]
prefix = ['A']
contents = [['T', 'EXP`']]
prefix = ['L']
contents = [['T', '*', 'F'], ['T', '/', 'F'], ['T', 'mod', 'F'], ['F']]
prefix = ['A']
contents = [['F', 'T`']]
prefix = ['L']
contents = [['F', 'T`']]
prefix = ['EXP']
contents = [['(', 'EXP', ')'], ['id'], ['NUM']]
prefix = ['A']
contents = [['(', 'EXP', ')'], ['id'], ['NUM']]
prefix = ['L']
contents = [['(', 'EXP', ')'], ['id'], ['NUM']]
prefix = ['EXP']
contents = [['(', 'EXP', ')'], ['id'], ['NUM']]
prefix = ['T']
contents = [['num'], ['num', '.', 'num'], ['num', 'e', 'num'], ['num', 'e', '+', 'num'], ['num', 'e', '-', 'num']]
prefix = ['A']
contents = [['num'], ['num', '.', 'num'], ['num', 'e', 'num'], ['num', 'e', '+', 'num'], ['num', 'e', '-', 'num']]
prefix = ['L']
contents = [['num'], ['num', '.', 'num'], ['num', 'e', 'num'], ['num', 'e', '+', 'num'], ['num', 'e', '-', 'num']]
prefix = ['EXP']
contents = [['num'], ['num', '.', 'num'], ['num', 'e', 'num'], ['num', 'e', '+', 'num'], ['num', 'e', '-', 'num']]
prefix = ['T']
contents = [['num'], ['num', '.', 'num'], ['num', 'e', 'num'], ['num', 'e', '+', 'num'], ['num', 'e', '-', 'num']]
prefix = ['F']
======= Grammar display ===========
count: 8
======= reg display =======
name = A
content:
  - ['{', 'L', '}']
first set:
set()
follow set:
set()
======= display end =======
======= reg display =======
name = L
content:
  - ['EXP', ';', 'L']
  - ['\\e']
first set:
set()
follow set:
set()
======= display end =======
======= reg display =======
name = EXP
content:
  - ['T', 'EXP`']
first set:
set()
follow set:
set()
======= display end =======
======= reg display =======
name = EXP`
content:
  - ['+', 'T', 'EXP`']
  - ['-', 'T', 'EXP`']
  - ['=', 'T', 'EXP`']
  - ['\\e']
first set:
set()
follow set:
set()
======= display end =======
======= reg display =======
name = T
content:
  - ['F', 'T`']
first set:
set()
follow set:
set()
======= display end =======
======= reg display =======
name = T`
content:
  - ['*', 'F', 'T`']
  - ['/', 'F', 'T`']
  - ['mod', 'F', 'T`']
  - ['\\e']
first set:
set()
follow set:
set()
======= display end =======
======= reg display =======
name = F
content:
  - ['(', 'EXP', ')']
  - ['id']
  - ['NUM']
first set:
set()
follow set:
set()
======= display end =======
======= reg display =======
name = NUM
content:
  - ['num']
  - ['num', '.', 'num']
  - ['num', 'e', 'num']
  - ['num', 'e', '+', 'num']
  - ['num', 'e', '-', 'num']
first set:
set()
follow set:
set()
======= display end =======
======= Grammar display end =======

contents = [['{', 'L', '}']]
prefix = ['{']
['{']
contents = [['{', 'L', '}']]
prefix = ['{', 'L']
['{', 'L']
contents = [['{', 'L', '}']]
prefix = ['{', 'L', '}']
contents = [['EXP', ';', 'L'], []]
prefix = ['EXP']
['EXP']
contents = [['EXP', ';', 'L'], []]
prefix = ['EXP', ';']
['EXP', ';']
contents = [['EXP', ';', 'L'], []]
prefix = ['EXP', ';', 'L']
contents = [['T', 'EXP`']]
prefix = ['T']
['T']
contents = [['T', 'EXP`']]
prefix = ['T', 'EXP`']
contents = [['+', 'T', 'EXP`'], ['-', 'T', 'EXP`'], ['=', 'T', 'EXP`'], []]
prefix = ['+']
['+']
contents = [['+', 'T', 'EXP`'], ['-', 'T', 'EXP`'], ['=', 'T', 'EXP`'], []]
prefix = ['+', 'T']
['+', 'T']
contents = [['+', 'T', 'EXP`'], ['-', 'T', 'EXP`'], ['=', 'T', 'EXP`'], []]
prefix = ['+', 'T', 'EXP`']
contents = [['+', 'T', 'EXP`'], ['-', 'T', 'EXP`'], ['=', 'T', 'EXP`'], []]
prefix = ['-']
['-']
contents = [['+', 'T', 'EXP`'], ['-', 'T', 'EXP`'], ['=', 'T', 'EXP`'], []]
prefix = ['-', 'T']
['-', 'T']
contents = [['+', 'T', 'EXP`'], ['-', 'T', 'EXP`'], ['=', 'T', 'EXP`'], []]
prefix = ['-', 'T', 'EXP`']
contents = [['+', 'T', 'EXP`'], ['-', 'T', 'EXP`'], ['=', 'T', 'EXP`'], []]
prefix = ['=']
['=']
contents = [['+', 'T', 'EXP`'], ['-', 'T', 'EXP`'], ['=', 'T', 'EXP`'], []]
prefix = ['=', 'T']
['=', 'T']
contents = [['+', 'T', 'EXP`'], ['-', 'T', 'EXP`'], ['=', 'T', 'EXP`'], []]
prefix = ['=', 'T', 'EXP`']
contents = [['F', 'T`']]
prefix = ['F']
['F']
contents = [['F', 'T`']]
prefix = ['F', 'T`']
contents = [['*', 'F', 'T`'], ['/', 'F', 'T`'], ['mod', 'F', 'T`'], []]
prefix = ['*']
['*']
contents = [['*', 'F', 'T`'], ['/', 'F', 'T`'], ['mod', 'F', 'T`'], []]
prefix = ['*', 'F']
['*', 'F']
contents = [['*', 'F', 'T`'], ['/', 'F', 'T`'], ['mod', 'F', 'T`'], []]
prefix = ['*', 'F', 'T`']
contents = [['*', 'F', 'T`'], ['/', 'F', 'T`'], ['mod', 'F', 'T`'], []]
prefix = ['/']
['/']
contents = [['*', 'F', 'T`'], ['/', 'F', 'T`'], ['mod', 'F', 'T`'], []]
prefix = ['/', 'F']
['/', 'F']
contents = [['*', 'F', 'T`'], ['/', 'F', 'T`'], ['mod', 'F', 'T`'], []]
prefix = ['/', 'F', 'T`']
contents = [['*', 'F', 'T`'], ['/', 'F', 'T`'], ['mod', 'F', 'T`'], []]
prefix = ['mod']
['mod']
contents = [['*', 'F', 'T`'], ['/', 'F', 'T`'], ['mod', 'F', 'T`'], []]
prefix = ['mod', 'F']
['mod', 'F']
contents = [['*', 'F', 'T`'], ['/', 'F', 'T`'], ['mod', 'F', 'T`'], []]
prefix = ['mod', 'F', 'T`']
contents = [['(', 'EXP', ')'], ['id'], ['NUM']]
prefix = ['(']
['(']
contents = [['(', 'EXP', ')'], ['id'], ['NUM']]
prefix = ['(', 'EXP']
['(', 'EXP']
contents = [['(', 'EXP', ')'], ['id'], ['NUM']]
prefix = ['(', 'EXP', ')']
contents = [['(', 'EXP', ')'], ['id'], ['NUM']]
prefix = ['id']
contents = [['(', 'EXP', ')'], ['id'], ['NUM']]
prefix = ['NUM']
contents = [['num'], ['num', '.', 'num'], ['num', 'e', 'num'], ['num', 'e', '+', 'num'], ['num', 'e', '-', 'num']]
prefix = ['num']
['num']
['num']
['num']
['num']
contents = [['num', 'NUM`']]
prefix = ['num']
['num']
contents = [['num', 'NUM`']]
prefix = ['num', 'NUM`']
contents = [['e', '-', 'num'], ['e', '+', 'num'], ['e', 'num'], ['.', 'num'], []]
prefix = ['e']
['e']
['e']
['e']
contents = [['e', '-', 'num'], ['e', '+', 'num'], ['e', 'num'], ['.', 'num'], []]
prefix = ['e', '-']
['e', '-']
contents = [['e', '-', 'num'], ['e', '+', 'num'], ['e', 'num'], ['.', 'num'], []]
prefix = ['e', '-', 'num']
contents = [['.', 'num'], [], ['e', 'NUM``']]
prefix = ['.']
['.']
contents = [['.', 'num'], [], ['e', 'NUM``']]
prefix = ['.', 'num']
contents = [['.', 'num'], [], ['e', 'NUM``']]
prefix = ['e']
['e']
contents = [['.', 'num'], [], ['e', 'NUM``']]
prefix = ['e', 'NUM``']
contents = [['num'], ['+', 'num'], ['-', 'num']]
prefix = ['num']
contents = [['num'], ['+', 'num'], ['-', 'num']]
prefix = ['+']
['+']
contents = [['num'], ['+', 'num'], ['-', 'num']]
prefix = ['+', 'num']
contents = [['num'], ['+', 'num'], ['-', 'num']]
prefix = ['-']
['-']
contents = [['num'], ['+', 'num'], ['-', 'num']]
prefix = ['-', 'num']
======= Grammar display ===========
count: 10
======= reg display =======
name = A
content:
  - ['{', 'L', '}']
first set:
{'{'}
follow set:
{'#'}
======= display end =======
======= reg display =======
name = L
content:
  - ['EXP', ';', 'L']
  - ['\\e']
first set:
{'num', 'id', '(', '\\e'}
follow set:
{'}'}
======= display end =======
======= reg display =======
name = EXP
content:
  - ['T', 'EXP`']
first set:
{'num', 'id', '('}
follow set:
{')', ';'}
======= display end =======
======= reg display =======
name = EXP`
content:
  - ['+', 'T', 'EXP`']
  - ['-', 'T', 'EXP`']
  - ['=', 'T', 'EXP`']
  - ['\\e']
first set:
{'+', '-', '=', '\\e'}
follow set:
{')', ';'}
======= display end =======
======= reg display =======
name = T
content:
  - ['F', 'T`']
first set:
{'num', 'id', '('}
follow set:
{'+', '-', ')', '=', ';'}
======= display end =======
======= reg display =======
name = T`
content:
  - ['*', 'F', 'T`']
  - ['/', 'F', 'T`']
  - ['mod', 'F', 'T`']
  - ['\\e']
first set:
{'mod', '*', '/', '\\e'}
follow set:
{'+', '-', ')', '=', ';'}
======= display end =======
======= reg display =======
name = F
content:
  - ['(', 'EXP', ')']
  - ['id']
  - ['NUM']
first set:
{'num', 'id', '('}
follow set:
{'=', ')', 'mod', ';', '+', '-', '*', '/'}
======= display end =======
======= reg display =======
name = NUM
content:
  - ['num', 'NUM`']
first set:
{'num'}
follow set:
{'=', ')', 'mod', ';', '+', '-', '*', '/'}
======= display end =======
======= reg display =======
name = NUM`
content:
  - ['.', 'num']
  - ['\\e']
  - ['e', 'NUM``']
first set:
{'e', '.', '\\e'}
follow set:
{'=', ')', 'mod', ';', '+', '-', '*', '/'}
======= display end =======
======= reg display =======
name = NUM``
content:
  - ['num']
  - ['+', 'num']
  - ['-', 'num']
first set:
{'+', '-', 'num'}
follow set:
{'=', ')', 'mod', ';', '+', '-', '*', '/'}
======= display end =======
======= Grammar display end =======

========================== prediction table display =========================
[]             [#]            [(]            [)]            [*]            [+]            [-]            [.]            [/]            [;]            [=]            [\e]           [e]            [id]           [mod]          [num]          [{]            [}]            
[A]            []             []             []             []             []             []             []             []             []             []             []             []             []             []             []             [{ L }]        []             
[L]            []             [EXP ; L]      []             []             []             []             []             []             []             []             [\e]           []             [EXP ; L]      []             [EXP ; L]      []             [\e]           
[EXP]          []             [T EXP`]       []             []             []             []             []             []             []             []             []             []             [T EXP`]       []             [T EXP`]       []             []             
[EXP`]         []             []             [\e]           []             [+ T EXP`]     [- T EXP`]     []             []             [\e]           [= T EXP`]     [\e]           []             []             []             []             []             []             
[T]            []             [F T`]         []             []             []             []             []             []             []             []             []             []             [F T`]         []             [F T`]         []             []             
[T`]           []             []             [\e]           [* F T`]       [\e]           [\e]           []             [/ F T`]       [\e]           [\e]           [\e]           []             []             [mod F T`]     []             []             []             
[F]            []             [( EXP )]      []             []             []             []             []             []             []             []             []             []             [id]           []             [NUM]          []             []             
[NUM]          []             []             []             []             []             []             []             []             []             []             []             []             []             []             [num NUM`]     []             []             
[NUM`]         []             []             [\e]           [\e]           [\e]           [\e]           [. num]        [\e]           [\e]           [\e]           [\e]           [e NUM``]      []             [\e]           []             []             []             
[NUM``]        []             []             []             []             [+ num]        [- num]        []             []             []             []             []             []             []             []             [num]          []             []             
========================== prediction table display end ==========================

line 0   : <   0 :   2 > - ( { : { )
line 0   : <   2 :   6 > - ( num : 123 )
line 0   : <   6 :   8 > - ( + : + )
line 0   : <   8 :  11 > - ( num : 12 )
line 0   : <  10 :  12 > - ( . : . )
line 0   : <  11 :  13 > - ( . : . )
line 0   : <  12 :  14 > - ( num : 3 )
line 0   : <  14 :  16 > - ( * : * )
line 0   : <  16 :  20 > - ( num : 123 )
line 0   : <  19 :  21 > - ( e : e )
line 0   : <  20 :  22 > - ( - : - )
line 0   : <  21 :  25 > - ( num : 123 )
line 0   : <  25 :  27 > - ( + : + )
line 0   : <  27 :  31 > - ( num : 123 )
line 0   : <  30 :  31 > - ( ; : ; )
line 1   : <   0 :   4 > - ( num : 123 )
line 1   : <   4 :   6 > - ( + : + )
line 1   : <   6 :  10 > - ( num : 123 )
line 1   : <  10 :  12 > - ( + : + )
line 1   : <  11 :  13 > - ( + : + )
line 1   : <  13 :  17 > - ( num : 123 )
line 1   : <  16 :  18 > - ( e : e )
line 1   : <  17 :  19 > - ( + : + )
line 1   : <  18 :  22 > - ( num : 123 )
line 1   : <  22 :  23 > - ( } : } )
====================== start analyze =========================

top = A ip = {
string = ['{', 'num', '+', 'num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', 'A']
pre len = 1
cur len = 4
>>> add
top = A
{'A': {}}

top = { ip = {
string = ['{', 'num', '+', 'num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', '{']
---terminal

top = L ip = num
string = ['num', '+', 'num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L']
pre len = 2
cur len = 5
>>> add
top = L
{'}': {}, 'L': {}, '{': {}, 'layer': 1}

top = EXP ip = num
string = ['num', '+', 'num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP']
pre len = 4
cur len = 6
>>> add
top = EXP
{'EXP': {}, 'layer': 2, 'L': {}, ';': {}}

top = T ip = num
string = ['num', '+', 'num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T']
pre len = 5
cur len = 7
>>> add
top = T
{'T': {}, 'layer': 3, 'EXP`': {}}

top = F ip = num
string = ['num', '+', 'num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'F']
pre len = 6
cur len = 7
>>> add
top = F
{'layer': 4, 'F': {}, 'T`': {}}

top = NUM ip = num
string = ['num', '+', 'num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM']
pre len = 6
cur len = 8
>>> add
top = NUM
{'NUM': {}, 'layer': 5}

top = num ip = num
string = ['num', '+', 'num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`', 'num']
---terminal

top = NUM` ip = +
string = ['+', 'num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`']
pre len = 6
cur len = 6
---empty

top = T` ip = +
string = ['+', 'num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`']
pre len = 5
cur len = 5
---empty

top = EXP` ip = +
string = ['+', 'num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`']
pre len = 4
cur len = 7
>>> add
top = EXP`
{'layer': 4, 'F': {'NUM': {'layer': 6, 'num': {}, 'NUM`': {}}, 'layer': 5}, 'T`': {}}

top = + ip = +
string = ['+', 'num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T', '+']
---terminal

top = T ip = num
string = ['num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T']
pre len = 5
cur len = 7
>>> add
top = T
{'+': {}, 'T': {}, 'EXP`': {}, 'layer': 5}

top = F ip = num
string = ['num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'F']
pre len = 6
cur len = 7
>>> add
top = F
{'layer': 6, 'F': {}, 'T`': {}}

top = NUM ip = num
string = ['num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM']
pre len = 6
cur len = 8
>>> add
top = NUM
{'NUM': {}, 'layer': 7}

top = num ip = num
string = ['num', '.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`', 'num']
---terminal

top = NUM` ip = .
string = ['.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`']
pre len = 6
cur len = 8
>>> add
top = NUM`
{'layer': 8, 'num': {}, 'NUM`': {}}

top = . ip = .
string = ['.', '.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'num', '.']
---terminal

top = num ip = .
string = ['.', 'num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'num']
---terminal

top = num ip = num
string = ['num', '*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'num']
---terminal

top = T` ip = *
string = ['*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`']
pre len = 5
cur len = 8
>>> add
top = T`
{'NUM': {'layer': 8, 'num': {}, 'NUM`': {'layer': 9, 'num': {}, '.': {}}}, 'layer': 7}

top = * ip = *
string = ['*', 'num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'F', '*']
---terminal

top = F ip = num
string = ['num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'F']
pre len = 6
cur len = 7
>>> add
top = F
{'layer': 8, 'F': {}, '*': {}, 'T`': {}}

top = NUM ip = num
string = ['num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM']
pre len = 6
cur len = 8
>>> add
top = NUM
{'NUM': {}, 'layer': 9}

top = num ip = num
string = ['num', 'e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`', 'num']
---terminal

top = NUM` ip = e
string = ['e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`']
pre len = 6
cur len = 8
>>> add
top = NUM`
{'layer': 10, 'num': {}, 'NUM`': {}}

top = e ip = e
string = ['e', '-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM``', 'e']
---terminal

top = NUM`` ip = -
string = ['-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM``']
pre len = 6
cur len = 8
>>> add
top = NUM``
{'e': {}, 'NUM``': {}, 'layer': 11}

top = - ip = -
string = ['-', 'num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'num', '-']
---terminal

top = num ip = num
string = ['num', '+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'num']
---terminal

top = T` ip = +
string = ['+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`']
pre len = 5
cur len = 5
---empty

top = EXP` ip = +
string = ['+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`']
pre len = 4
cur len = 7
>>> add
top = EXP`
{'layer': 10, 'num': {}, 'NUM`': {'e': {}, 'NUM``': {'layer': 12, '-': {}, 'num': {}}, 'layer': 11}}

top = + ip = +
string = ['+', 'num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T', '+']
---terminal

top = T ip = num
string = ['num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T']
pre len = 5
cur len = 7
>>> add
top = T
{'+': {}, 'T': {}, 'EXP`': {}, 'layer': 11}

top = F ip = num
string = ['num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'F']
pre len = 6
cur len = 7
>>> add
top = F
{'layer': 12, 'F': {}, 'T`': {}}

top = NUM ip = num
string = ['num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM']
pre len = 6
cur len = 8
>>> add
top = NUM
{'NUM': {}, 'layer': 13}

top = num ip = num
string = ['num', ';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`', 'num']
---terminal

top = NUM` ip = ;
string = [';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`']
pre len = 6
cur len = 6
---empty

top = T` ip = ;
string = [';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`']
pre len = 5
cur len = 5
---empty

top = EXP` ip = ;
string = [';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`']
pre len = 4
cur len = 4
---empty

top = ; ip = ;
string = [';', 'num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';']
---terminal

top = L ip = num
string = ['num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L']
pre len = 2
cur len = 5
>>> add
top = L
{'EXP': {'T': {'layer': 4, 'F': {'NUM': {'layer': 6, 'num': {}, 'NUM`': {}}, 'layer': 5}, 'T`': {}}, 'layer': 3, 'EXP`': {'+': {}, 'T': {'layer': 6, 'F': {'NUM': {'layer': 8, 'num': {}, 'NUM`': {'layer': 9, 'num': {}, '.': {}}}, 'layer': 7}, 'T`': {'layer': 8, 'F': {'NUM': {'layer': 10, 'num': {}, 'NUM`': {'e': {}, 'NUM``': {'layer': 12, '-': {}, 'num': {}}, 'layer': 11}}, 'layer': 9}, '*': {}, 'T`': {}}}, 'EXP`': {'+': {}, 'T': {'layer': 12, 'F': {'NUM': {'layer': 14, 'num': {}, 'NUM`': {}}, 'layer': 13}, 'T`': {}}, 'EXP`': {}, 'layer': 11}, 'layer': 5}}, 'layer': 2, 'L': {}, ';': {}}

top = EXP ip = num
string = ['num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP']
pre len = 4
cur len = 6
>>> add
top = EXP
{'EXP': {}, 'layer': 3, 'L': {}, ';': {}}

top = T ip = num
string = ['num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T']
pre len = 5
cur len = 7
>>> add
top = T
{'T': {}, 'layer': 4, 'EXP`': {}}

top = F ip = num
string = ['num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'F']
pre len = 6
cur len = 7
>>> add
top = F
{'layer': 5, 'F': {}, 'T`': {}}

top = NUM ip = num
string = ['num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM']
pre len = 6
cur len = 8
>>> add
top = NUM
{'NUM': {}, 'layer': 6}

top = num ip = num
string = ['num', '+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`', 'num']
---terminal

top = NUM` ip = +
string = ['+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`']
pre len = 6
cur len = 6
---empty

top = T` ip = +
string = ['+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`']
pre len = 5
cur len = 5
---empty

top = EXP` ip = +
string = ['+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`']
pre len = 4
cur len = 7
>>> add
top = EXP`
{'layer': 5, 'F': {'NUM': {'layer': 7, 'num': {}, 'NUM`': {}}, 'layer': 6}, 'T`': {}}

top = + ip = +
string = ['+', 'num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T', '+']
---terminal

top = T ip = num
string = ['num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T']
pre len = 5
cur len = 7
>>> add
top = T
{'+': {}, 'T': {}, 'EXP`': {}, 'layer': 6}

top = F ip = num
string = ['num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'F']
pre len = 6
cur len = 7
>>> add
top = F
{'layer': 7, 'F': {}, 'T`': {}}

top = NUM ip = num
string = ['num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM']
pre len = 6
cur len = 8
>>> add
top = NUM
{'NUM': {}, 'layer': 8}

top = num ip = num
string = ['num', '+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`', 'num']
---terminal

top = NUM` ip = +
string = ['+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`']
pre len = 6
cur len = 6
---empty

top = T` ip = +
string = ['+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`']
pre len = 5
cur len = 5
---empty

top = EXP` ip = +
string = ['+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`']
pre len = 4
cur len = 7
>>> add
top = EXP`
{'layer': 7, 'F': {'NUM': {'layer': 9, 'num': {}, 'NUM`': {}}, 'layer': 8}, 'T`': {}}

top = + ip = +
string = ['+', '+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T', '+']
---terminal

top = T ip = +
string = ['+', 'num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T']

top = T ip = num
string = ['num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T']
pre len = 5
cur len = 7
>>> add
top = T
{'+': {}, 'T': {}, 'EXP`': {}, 'layer': 8}

top = F ip = num
string = ['num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'F']
pre len = 6
cur len = 7
>>> add
top = F
{'layer': 9, 'F': {}, 'T`': {}}

top = NUM ip = num
string = ['num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM']
pre len = 6
cur len = 8
>>> add
top = NUM
{'NUM': {}, 'layer': 10}

top = num ip = num
string = ['num', 'e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`', 'num']
---terminal

top = NUM` ip = e
string = ['e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM`']
pre len = 6
cur len = 8
>>> add
top = NUM`
{'layer': 11, 'num': {}, 'NUM`': {}}

top = e ip = e
string = ['e', '+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM``', 'e']
---terminal

top = NUM`` ip = +
string = ['+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'NUM``']
pre len = 6
cur len = 8
>>> add
top = NUM``
{'e': {}, 'NUM``': {}, 'layer': 12}

top = + ip = +
string = ['+', 'num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'num', '+']
---terminal

top = num ip = num
string = ['num', '}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`', 'num']
---terminal

top = T` ip = }
string = ['}', '#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`']

top = T` ip = #
string = ['#']
stack = ['#', '}', 'L', ';', 'EXP`', 'T`']
============= no more lexicals, system logout ==============
============= Unrecoverable error ==========================
========================= error ==========================
error at ., the production expression not matched.
at line 1   column 11 : { 123 + 12..3 * 123e-123 + 123;
                                   ^                   
--------------------------------------------------------
========================= error ==========================
error at +, the production expression not matched.
at line 2   column 11 : 123 + 123 ++ 123e+123 }
                                   ^           
--------------------------------------------------------
========================= error ==========================
error at }, the production expression not matched.
at line 2   column 22 : 123 + 123 ++ 123e+123 }
                                              ^
--------------------------------------------------------
========================= error ==========================
error at #, this statement is incomplete.
at line 2   column 24 : 123 + 123 ++ 123e+123 }
                                               ^
--------------------------------------------------------
==========================================================
