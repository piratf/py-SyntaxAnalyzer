argc = 3
===============================
=> start parse.
line 0: ( num : 123 )
line 0: ( + : + )
line 0: ( num : 123 )
line 0: ( * : * )
line 0: ( num : 123 )
 found.
line    0  - <  0 :  4 > - ( num : 123 ) 
content: 123 + 123 * 123;
line    0  - <  4 :  6 > - ( + : + ) 
content: 123 + 123 * 123;
line    0  - <  6 : 10 > - ( num : 123 ) 
content: 123 + 123 * 123;
line    0  - < 10 : 12 > - ( * : * ) 
content: 123 + 123 * 123;
line    0  - < 12 : 16 > - ( num : 123 ) 
content: 123 + 123 * 123;
line    0  - < 15 : 16 > - ( ; : ; ) 
content: 123 + 123 * 123;
============= Lexical Analyze Finished =============
============= 0 ERROR======= Grammar display ===========
count: 6
======= reg display =======
name = L
content:
  - ['E', ';', 'L']
  - ['\\e']
first set:
{'id', 'num', '(', '\\e'}
follow set:
{'#'}
======= display end =======
======= reg display =======
name = E
content:
  - ['T', 'E+']
first set:
{'id', 'num', '('}
follow set:
{')', ';'}
======= display end =======
======= reg display =======
name = E+
content:
  - ['+', 'T', 'E+']
  - ['-', 'T', 'E+']
  - ['\\e']
first set:
{'-', '\\e', '+'}
follow set:
{')', ';'}
======= display end =======
======= reg display =======
name = T
content:
  - ['F', 'T+']
first set:
{'id', 'num', '('}
follow set:
{')', ';', '-', '+'}
======= display end =======
======= reg display =======
name = T+
content:
  - ['*', 'F', 'T+']
  - ['/', 'F', 'T+']
  - ['mod', 'F', 'T+']
  - ['\\e']
first set:
{'/', '*', 'mod', '\\e'}
follow set:
{')', ';', '-', '+'}
======= display end =======
======= reg display =======
name = F
content:
  - ['(', 'E', ')']
  - ['id']
  - ['num']
first set:
{'id', 'num', '('}
follow set:
{'*', ';', '-', '+', '/', ')', 'mod'}
======= display end =======
======= Grammar display end =======

========================== prediction table display =========================
[]             [#]            [(]            [)]            [*]            [+]            [-]            [/]            [;]            [\e]           [id]           [mod]          [num]          
[L]            [\e]           [E ; L]        []             []             []             []             []             []             [\e]           [E ; L]        []             [E ; L]        
[E]            []             [T E+]         []             []             []             []             []             []             []             [T E+]         []             [T E+]         
[E+]           []             []             [\e]           []             [+ T E+]       [- T E+]       []             [\e]           [\e]           []             []             []             
[T]            []             [F T+]         []             []             []             []             []             []             []             [F T+]         []             [F T+]         
[T+]           []             []             [\e]           [* F T+]       [\e]           [\e]           [/ F T+]       [\e]           [\e]           []             [mod F T+]     []             
[F]            []             [( E )]        []             []             []             []             []             []             []             [id]           []             [num]          
========================== prediction table display end ==========================

line 0   : <   0 :   4 > - ( num : 123 )
line 0   : <   4 :   6 > - ( + : + )
line 0   : <   6 :  10 > - ( num : 123 )
line 0   : <  10 :  12 > - ( * : * )
line 0   : <  12 :  16 > - ( num : 123 )
line 0   : <  15 :  16 > - ( ; : ; )
====================== start analyze =========================
{'L': {}}

top = L ip = num
string = ['num', '+', 'num', '*', 'num', ';', '#']
stack = ['#', 'L']
pre len = 1
cur len = 4
>>> add
{';': {}, 'E': {}, 'layer': 1, 'L': {}}
({'L': {';': {}, 'E': {}, 'layer': 1, 'L': {}}}, 1)

top = E ip = num
string = ['num', '+', 'num', '*', 'num', ';', '#']
stack = ['#', 'L', ';', 'E']
pre len = 3
cur len = 5
>>> add
{'E+': {}, 'T': {}, 'layer': 2}
({'L': {';': {}, 'E': {'E+': {}, 'T': {}, 'layer': 2}, 'layer': 1, 'L': {}}}, 1)
({';': {}, 'E': {'E+': {}, 'T': {}, 'layer': 2}, 'layer': 1, 'L': {}}, 2)

top = T ip = num
string = ['num', '+', 'num', '*', 'num', ';', '#']
stack = ['#', 'L', ';', 'E+', 'T']
pre len = 4
cur len = 6
>>> add
{'T+': {}, 'F': {}, 'layer': 3}
({'L': {';': {}, 'E': {'E+': {}, 'T': {'T+': {}, 'F': {}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}}, 1)
({';': {}, 'E': {'E+': {}, 'T': {'T+': {}, 'F': {}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}, 2)
({'E+': {}, 'T': {'T+': {}, 'F': {}, 'layer': 3}, 'layer': 2}, 3)

top = F ip = num
string = ['num', '+', 'num', '*', 'num', ';', '#']
stack = ['#', 'L', ';', 'E+', 'T+', 'F']
pre len = 5
cur len = 6
>>> add
{'num': {}, 'layer': 4}
({'L': {';': {}, 'E': {'E+': {}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}}, 1)
({';': {}, 'E': {'E+': {}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}, 2)
({'E+': {}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 3)
({'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 4)

top = num ip = num
string = ['num', '+', 'num', '*', 'num', ';', '#']
stack = ['#', 'L', ';', 'E+', 'T+', 'num']
---terminal

top = T+ ip = +
string = ['+', 'num', '*', 'num', ';', '#']
stack = ['#', 'L', ';', 'E+', 'T+']
pre len = 4
cur len = 4
---empty

top = E+ ip = +
string = ['+', 'num', '*', 'num', ';', '#']
stack = ['#', 'L', ';', 'E+']
pre len = 3
cur len = 6
>>> add
{'E+': {}, 'layer': 3, 'T': {}, '+': {}}
({'L': {';': {}, 'E': {'E+': {'E+': {}, 'layer': 3, 'T': {}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}}, 1)
({';': {}, 'E': {'E+': {'E+': {}, 'layer': 3, 'T': {}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}, 2)
({'E+': {'E+': {}, 'layer': 3, 'T': {}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 3)

top = + ip = +
string = ['+', 'num', '*', 'num', ';', '#']
stack = ['#', 'L', ';', 'E+', 'T', '+']
---terminal

top = T ip = num
string = ['num', '*', 'num', ';', '#']
stack = ['#', 'L', ';', 'E+', 'T']
pre len = 4
cur len = 6
>>> add
{'T+': {}, 'F': {}, 'layer': 4}
({'L': {';': {}, 'E': {'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {}, 'F': {}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}}, 1)
({';': {}, 'E': {'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {}, 'F': {}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}, 2)
({'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {}, 'F': {}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 3)
({'E+': {}, 'layer': 3, 'T': {'T+': {}, 'F': {}, 'layer': 4}, '+': {}}, 4)

top = F ip = num
string = ['num', '*', 'num', ';', '#']
stack = ['#', 'L', ';', 'E+', 'T+', 'F']
pre len = 5
cur len = 6
>>> add
{'num': {}, 'layer': 5}
({'L': {';': {}, 'E': {'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}}, 1)
({';': {}, 'E': {'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}, 2)
({'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 3)
({'E+': {}, 'layer': 3, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 4)
({'T+': {}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, 5)

top = num ip = num
string = ['num', '*', 'num', ';', '#']
stack = ['#', 'L', ';', 'E+', 'T+', 'num']
---terminal

top = T+ ip = *
string = ['*', 'num', ';', '#']
stack = ['#', 'L', ';', 'E+', 'T+']
pre len = 4
cur len = 7
>>> add
{'*': {}, 'T+': {}, 'F': {}, 'layer': 5}
({'L': {';': {}, 'E': {'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {'*': {}, 'T+': {}, 'F': {}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}}, 1)
({';': {}, 'E': {'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {'*': {}, 'T+': {}, 'F': {}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}, 2)
({'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {'*': {}, 'T+': {}, 'F': {}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 3)
({'E+': {}, 'layer': 3, 'T': {'T+': {'*': {}, 'T+': {}, 'F': {}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 4)
({'T+': {'*': {}, 'T+': {}, 'F': {}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, 5)

top = * ip = *
string = ['*', 'num', ';', '#']
stack = ['#', 'L', ';', 'E+', 'T+', 'F', '*']
---terminal

top = F ip = num
string = ['num', ';', '#']
stack = ['#', 'L', ';', 'E+', 'T+', 'F']
pre len = 5
cur len = 6
>>> add
{'num': {}, 'layer': 6}
({'L': {';': {}, 'E': {'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {'*': {}, 'T+': {}, 'F': {'num': {}, 'layer': 6}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}}, 1)
({';': {}, 'E': {'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {'*': {}, 'T+': {}, 'F': {'num': {}, 'layer': 6}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}, 2)
({'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {'*': {}, 'T+': {}, 'F': {'num': {}, 'layer': 6}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 3)
({'E+': {}, 'layer': 3, 'T': {'T+': {'*': {}, 'T+': {}, 'F': {'num': {}, 'layer': 6}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 4)
({'T+': {'*': {}, 'T+': {}, 'F': {'num': {}, 'layer': 6}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, 5)
({'*': {}, 'T+': {}, 'F': {'num': {}, 'layer': 6}, 'layer': 5}, 6)

top = num ip = num
string = ['num', ';', '#']
stack = ['#', 'L', ';', 'E+', 'T+', 'num']
---terminal

top = T+ ip = ;
string = [';', '#']
stack = ['#', 'L', ';', 'E+', 'T+']
pre len = 4
cur len = 4
---empty

top = E+ ip = ;
string = [';', '#']
stack = ['#', 'L', ';', 'E+']
pre len = 3
cur len = 3
---empty

top = ; ip = ;
string = [';', '#']
stack = ['#', 'L', ';']
---terminal

top = L ip = #
string = ['#']
stack = ['#', 'L']
pre len = 1
cur len = 1
---empty
====================== Analyze Success! ========================
==========================================================
[{';': {}, 'E': {'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {'*': {}, 'T+': {}, 'F': {'num': {}, 'layer': 6}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}]
{';': {}, 'E': {'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {'*': {}, 'T+': {}, 'F': {'num': {}, 'layer': 6}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}, 'layer': 1, 'L': {}}
k = ;
k = E
k = L
{'E+': {'E+': {}, 'layer': 3, 'T': {'T+': {'*': {}, 'T+': {}, 'F': {'num': {}, 'layer': 6}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}, 'T': {'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}, 'layer': 2}
k = E+
k = T
{'T+': {}, 'F': {'num': {}, 'layer': 4}, 'layer': 3}
k = T+
k = F
{'num': {}, 'layer': 4}
k = num
{'E+': {}, 'layer': 3, 'T': {'T+': {'*': {}, 'T+': {}, 'F': {'num': {}, 'layer': 6}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}, '+': {}}
k = E+
k = T
k = +
{'T+': {'*': {}, 'T+': {}, 'F': {'num': {}, 'layer': 6}, 'layer': 5}, 'F': {'num': {}, 'layer': 5}, 'layer': 4}
k = T+
k = F
{'num': {}, 'layer': 5}
k = num
{'*': {}, 'T+': {}, 'F': {'num': {}, 'layer': 6}, 'layer': 5}
k = *
k = T+
k = F
{'num': {}, 'layer': 6}
k = num
