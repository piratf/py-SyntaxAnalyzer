======= Grammar display ===========
count: 8
======= reg display =======
name = L
content:
  - ['EXP', ';', 'L']
  - ['\\e']
first set:
{'\\e', 'id', '(', 'num'}
follow set:
{'#'}
======= display end =======
======= reg display =======
name = EXP
content:
  - ['T', 'EXP+']
first set:
{'id', '(', 'num'}
follow set:
{')', ';'}
======= display end =======
======= reg display =======
name = EXP+
content:
  - ['+', 'T', 'EXP+']
  - ['-', 'T', 'EXP+']
  - ['=', 'T', 'EXP+']
  - ['\\e']
first set:
{'\\e', '-', '=', '+'}
follow set:
{')', ';'}
======= display end =======
======= reg display =======
name = T
content:
  - ['F', 'T+']
first set:
{'id', '(', 'num'}
follow set:
{')', '-', ';', '=', '+'}
======= display end =======
======= reg display =======
name = T+
content:
  - ['*', 'F', 'T+']
  - ['/', 'F', 'T+']
  - ['mod', 'F', 'T+']
  - ['\\e']
first set:
{'mod', '\\e', '*', '/'}
follow set:
{')', '-', ';', '=', '+'}
======= display end =======
======= reg display =======
name = F
content:
  - ['(', 'EXP', ')']
  - ['id']
  - ['NUM']
first set:
{'id', '(', 'num'}
follow set:
{'*', '-', '/', 'mod', ')', ';', '=', '+'}
======= display end =======
======= reg display =======
name = NUM
content:
  - ['num', 'NUM+']
first set:
{'num'}
follow set:
{'*', '-', '/', 'mod', ')', ';', '=', '+'}
======= display end =======
======= reg display =======
name = NUM+
content:
  - ['E', 'num']
  - ['.', 'num']
  - ['\\e']
first set:
{'E', '\\e', '.'}
follow set:
{'*', '-', '/', 'mod', ')', ';', '=', '+'}
======= display end =======
======= Grammar display end =======

========================== prediction table display =========================
[]             [#]            [(]            [)]            [*]            [+]            [-]            [.]            [/]            [;]            [=]            [E]            [\e]           [id]           [mod]          [num]          
[L]            [\e]           [EXP ; L]      []             []             []             []             []             []             []             []             []             [\e]           [EXP ; L]      []             [EXP ; L]      
[EXP]          []             [T EXP+]       []             []             []             []             []             []             []             []             []             []             [T EXP+]       []             [T EXP+]       
[EXP+]         []             []             [\e]           []             [+ T EXP+]     [- T EXP+]     []             []             [\e]           [= T EXP+]     []             [\e]           []             []             []             
[T]            []             [F T+]         []             []             []             []             []             []             []             []             []             []             [F T+]         []             [F T+]         
[T+]           []             []             [\e]           [* F T+]       [\e]           [\e]           []             [/ F T+]       [\e]           [\e]           []             [\e]           []             [mod F T+]     []             
[F]            []             [( EXP )]      []             []             []             []             []             []             []             []             []             []             [id]           []             [NUM]          
[NUM]          []             []             []             []             []             []             []             []             []             []             []             []             []             []             [num NUM+]     
[NUM+]         []             []             [\e]           [\e]           [\e]           [\e]           [. num]        [\e]           [\e]           [\e]           [E num]        [\e]           []             [\e]           []             
========================== prediction table display end =====================

line 0   : <   0 :   4 > - ( num : 123 )
line 0   : <   4 :   6 > - ( + : + )
line 0   : <   6 :  10 > - ( num : 123 )
line 0   : <  10 :  12 > - ( * : * )
line 0   : <  12 :  16 > - ( num : 123 )
line 0   : <  15 :  16 > - ( ; : ; )
line 1   : <   0 :   4 > - ( num : 123 )
====================== start analyze =========================
top = L ip = num
string = ['num', '+', 'num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L']
top = EXP ip = num
string = ['num', '+', 'num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP']
top = T ip = num
string = ['num', '+', 'num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T']
top = F ip = num
string = ['num', '+', 'num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'F']
top = NUM ip = num
string = ['num', '+', 'num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'NUM']
top = num ip = num
string = ['num', '+', 'num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'NUM+', 'num']
top = NUM+ ip = +
string = ['+', 'num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'NUM+']
top = T+ ip = +
string = ['+', 'num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+']
top = EXP+ ip = +
string = ['+', 'num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+']
top = + ip = +
string = ['+', 'num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T', '+']
top = T ip = num
string = ['num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T']
top = F ip = num
string = ['num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'F']
top = NUM ip = num
string = ['num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'NUM']
top = num ip = num
string = ['num', '*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'NUM+', 'num']
top = NUM+ ip = *
string = ['*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'NUM+']
top = T+ ip = *
string = ['*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+']
top = * ip = *
string = ['*', 'num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'F', '*']
top = F ip = num
string = ['num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'F']
top = NUM ip = num
string = ['num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'NUM']
top = num ip = num
string = ['num', ';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'NUM+', 'num']
top = NUM+ ip = ;
string = [';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'NUM+']
top = T+ ip = ;
string = [';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+']
top = EXP+ ip = ;
string = [';', 'num', '#']
stack = ['#', 'L', ';', 'EXP+']
top = ; ip = ;
string = [';', 'num', '#']
stack = ['#', 'L', ';']
top = L ip = num
string = ['num', '#']
stack = ['#', 'L']
top = EXP ip = num
string = ['num', '#']
stack = ['#', 'L', ';', 'EXP']
top = T ip = num
string = ['num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T']
top = F ip = num
string = ['num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'F']
top = NUM ip = num
string = ['num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'NUM']
top = num ip = num
string = ['num', '#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'NUM+', 'num']
top = NUM+ ip = #
string = ['#']
stack = ['#', 'L', ';', 'EXP+', 'T+', 'NUM+']
============= no more lexicals, system logout ==============
============= Unrecoverable error ==========================
